'''
GenIDs.py
Sat Nov 30 12:00:18 2002
Generated by MiddleKit.
'''

# MK attribute caches for setFoo() methods
_TablenameAttr = None
_LastIDAttr = None
_LastschriftenAttr = None

import types
from mx import DateTime


from MiddleKit.Run.MiddleObject import MiddleObject
from types import InstanceType, LongType



class GenIDs(MiddleObject):

	def __init__(self):
		MiddleObject.__init__(self)
		self._Tablename     = None
		self._LastID        = None
		self._Lastschriften = None


	def Tablename(self):
		return self._Tablename

	def setTablename(self, value):
		assert value is not None
		if value is not None:
			if type(value) is not types.StringType:
				raise TypeError, 'expecting string type, but got value %r of type %r instead' % (value, type(value))

		# set the attribute
		origValue = self._Tablename
		self._Tablename = value

		# MiddleKit machinery
		self._mk_changed = 1  # @@ original semantics, but I think this should be under "if not self._mk_initing..."
		if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
			global _TablenameAttr
			if _TablenameAttr is None:
				_TablenameAttr = self.klass().lookupAttr('Tablename')
				if not _TablenameAttr.shouldRegisterChanges():
					_TablenameAttr = 0
			if _TablenameAttr:
				# Record that it has been changed
				if self._mk_changedAttrs is None:
					self._mk_changedAttrs = {} # maps name to attribute
				self._mk_changedAttrs['Tablename'] = _TablenameAttr  # changedAttrs is a set
				# Tell ObjectStore it happened
				self._mk_store.objectChanged(self)

	def LastID(self):
		return self._LastID

	def setLastID(self, value):
		assert value is not None
		if value is not None:
			if type(value) is types.LongType:
				value = int(value)
			elif type(value) is not types.IntType:
				raise TypeError, 'expecting int type, but got value %r of type %r instead' % (value, type(value))

		# set the attribute
		origValue = self._LastID
		self._LastID = value

		# MiddleKit machinery
		self._mk_changed = 1  # @@ original semantics, but I think this should be under "if not self._mk_initing..."
		if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
			global _LastIDAttr
			if _LastIDAttr is None:
				_LastIDAttr = self.klass().lookupAttr('LastID')
				if not _LastIDAttr.shouldRegisterChanges():
					_LastIDAttr = 0
			if _LastIDAttr:
				# Record that it has been changed
				if self._mk_changedAttrs is None:
					self._mk_changedAttrs = {} # maps name to attribute
				self._mk_changedAttrs['LastID'] = _LastIDAttr  # changedAttrs is a set
				# Tell ObjectStore it happened
				self._mk_store.objectChanged(self)

	def Lastschriften(self):
		return self._Lastschriften

	def setLastschriften(self, value):
		if value is not None:
			if type(value) is not types.StringType:
				raise TypeError, 'expecting string type, but got value %r of type %r instead' % (value, type(value))

		# set the attribute
		origValue = self._Lastschriften
		self._Lastschriften = value

		# MiddleKit machinery
		self._mk_changed = 1  # @@ original semantics, but I think this should be under "if not self._mk_initing..."
		if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
			global _LastschriftenAttr
			if _LastschriftenAttr is None:
				_LastschriftenAttr = self.klass().lookupAttr('Lastschriften')
				if not _LastschriftenAttr.shouldRegisterChanges():
					_LastschriftenAttr = 0
			if _LastschriftenAttr:
				# Record that it has been changed
				if self._mk_changedAttrs is None:
					self._mk_changedAttrs = {} # maps name to attribute
				self._mk_changedAttrs['Lastschriften'] = _LastschriftenAttr  # changedAttrs is a set
				# Tell ObjectStore it happened
				self._mk_store.objectChanged(self)

